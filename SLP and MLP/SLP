clear; close all; clc;
data = load('iris.txt');
x = data(:, 1:4);    
y = data(:, 5);
%disp(x)
%disp(y)
x1=data(1:50,:);
x2=data(51:100,:);
x3 =data(101:150,:);
%size(z);
%disp(x1);  
total_train = 0;
total_test = 0;
learningrate = 0.01;

bias=-1;
w0= randi([-300 300], 5, 1)/1000; 
%disp(w0)
epochs=100;

mat=zeros(9,3);

for n= 1:9
cv = cvpartition(size(x1,1),'HoldOut',n/10);
idx = cv.test;
dataTrain1 = x1(idx,:);
dataTest1  = x1(~idx,:);
cv = cvpartition(size(x2,1),'HoldOut',n/10);
idx = cv.test;
dataTrain2 = x2(idx,:);
dataTest2  = x2(~idx,:);
cv = cvpartition(size(x3,1),'HoldOut',n/10);
idx = cv.test;
dataTrain3 = x3(idx,:);
dataTest3  = x3(~idx,:);

dataTrain= [dataTrain1 ;dataTrain2 ;dataTrain3];
dataTest = [dataTest1; dataTest2; dataTest3];
x_Train= dataTrain(:, 1:4);    
y_Train = dataTrain(:, 5);
x_Test= dataTest(:, 1:4);    
y_Test = dataTest(:, 5);

test_Y = transformer(dataTest(:, 5));
train_Y = transformer(dataTrain(:, 5));
train_merged = [x_Train, train_Y]; %re-merge all integer data
train_shuffled = train_merged(randperm(size(train_merged, 1)), :); %shuffle data

inMat = train_shuffled(:,1:4);
outVec = train_shuffled(:,5:7);

myperceptron=trainperceptron(train_shuffled(:,1:4),train_shuffled(:,5:7),bias,learningrate, w0, epochs);

result1 = trainperceptron1(x_Train,train_Y,-1,myperceptron);
result=testperceptron(x_Test,test_Y,-1,myperceptron);

result_table2=array2table(result1);
result_table1=array2table(result);

%fprintf('Classification results:\n');
%fprintf('%6.0f %6.0f %6.0f\r\n',transpose(result));
%disp(transpose(result));
%fprintf('Actual classes: \n');
%fprintf('%6.0f %6.0f %6.0f\r\n',transpose(test_Y));
%disp(transpose(test_Y));
false_class=0;
true_class=0;
for row = 1:length(result)
    if result(row,1)==test_Y(row,1) && result(row,2)==test_Y(row,2) && result(row,3)==test_Y(row,3)
        true_class=true_class+1;
    elseif (result(row,1)~=test_Y(row,1)) || (result(row,2)~=test_Y(row,2)) || (result(row,3)~=test_Y(row,3))
        false_class=false_class+1;
    end
end
correct_percent=100*true_class/length(result);
fprintf('The SLP correctly classified %g out of %g. Success rate of : %g percent. \n\n',true_class,length(result),correct_percent);

mat(n,3) = correct_percent;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
%%%%%%%%%%%%%%%%%%%%%%%%
false_class=0;
true_class=0;
for row = 1:length(result1)
    if result1(row,1)==train_Y(row,1) && result1(row,2)==train_Y(row,2) && result1(row,3)==train_Y(row,3)
        true_class=true_class+1;
    elseif (result1(row,1)~=train_Y(row,1)) || (result1(row,2)~=train_Y(row,2)) || (result1(row,3)~=train_Y(row,3))
        false_class=false_class+1;
    end
end
correct_percent=100*true_class/length(result1);
fprintf('The SLP correctly classified %g out of %g. Success rate of : %g percent. \n\n',true_class,length(result1),correct_percent);
mat(n,2) = correct_percent;
mat(n,1)=n*10;





end

plot(mat(:,1),mat(:,[2:3]));
mat=[mat;mean(mat)];
disp(mat);
csvwrite("da.csv",mat);

function change = transformer(vector)
    index = 1;
    l = length(vector);
    change = [];
    while index<=l
        if vector(index)==1
            change = [change; 1, 0, 0];
        elseif vector(index)==2
            change = [change; 0, 1, 0];
        else
            change = [change; 0, 0, 1]; %iris virginica
        end
        index=index+1;
    end
end




%TRAINING PERCEPTRON:
function train = trainperceptron(inMat,outMat,bias,learningrate,w,epochs)
    
    numIn=length(inMat); 
    w1=w;
    w2=w;
    w3=w;
    
    for i= 1:epochs
        
        for row = 1:numIn 
      
            %OUTPUTNODE1:  
            w1=node(bias,w1,inMat(row,:),outMat(row,:),1,learningrate); 
            
            %OUTPUTNODE2:  
            w2=node(bias,w2,inMat(row,:),outMat(row,:),2,learningrate); 
            
            %OUTPUTNODE3:   
            w3=node(bias,w3,inMat(row,:),outMat(row,:),3,learningrate); 

        end    
    end
    
    train = [w1 w2 w3]; %output matrix with trained weights for each (output) node
end

function new_weights = node(bias,w,in_row,out_vec,index,learningrate)
    
    activation=bias*w(1,1)+in_row(1)*w(2,1)+in_row(2)*w(3,1)+in_row(3)*w(4,1)+in_row(4)*w(5,1);
   
    theta=w(1,1); 
    if activation >= theta
        y=1;
    else
        y=0;
    end
    if y==1 && out_vec(index)==0 
        w(1,1)=w(1,1) - learningrate*bias;
        w(2,1)=w(2,1) - learningrate*in_row(1);
        w(3,1)=w(3,1) - learningrate*in_row(2);
        w(4,1)=w(4,1) - learningrate*in_row(3);
        w(5,1)=w(5,1) - learningrate*in_row(4);
    elseif y==0 && out_vec(index)==1 
        w(1,1)=w(1,1) + learningrate*bias;
        w(2,1)=w(2,1) + learningrate*in_row(1);
        w(3,1)=w(3,1) + learningrate*in_row(2);
        w(4,1)=w(4,1) + learningrate*in_row(3);
        w(5,1)=w(5,1) + learningrate*in_row(4);
    end
    
    new_weights=w; %output updated weight vector
end

%TESTING PERCEPTRON:
function test = testperceptron(testinMat,testoutMat,bias,trained_wMat)
    
    numIn=length(testinMat); 
    %disp(testinMat);
    %disp(testoutMat);
   
    w1=trained_wMat(:,1);
    w2=trained_wMat(:,2);
    w3=trained_wMat(:,3);
    
    outputMatrix=[];
    
    for row = 1:numIn 


        %OUTPUT1: 
        output1=testnode(bias,w1,testinMat(row,:),testoutMat(row,:),1,row,1);

        %OUTPUTNODE2:   
        %should only return 1 for iris versicolor, 0 for other types
        output2=testnode(bias,w2,testinMat(row,:),testoutMat(row,:),2,row,2); 

        %OUTPUTNODE3: 
        output3=testnode(bias,w3,testinMat(row,:),testoutMat(row,:),3,row,3);
        
        row_output=[output1 output2 output3];
        %fprintf(logfile,sprintf('row number %g : Perceptron output is [%s,%s,%s]. Actual class is [%s,%s,%s]. \n',row,row_output,testoutMat(row,:)));
        outputMatrix=[outputMatrix;row_output];
    end
    test = outputMatrix; %output matrix with "output code" that the perceptron calculated for each row
end

function classify = testnode(bias,w,in_row,out_vec,index,rowNumber,nodeNumber)
    
    activation=bias*w(1,1)+in_row(1)*w(2,1)+in_row(2)*w(3,1)+in_row(3)*w(4,1)+in_row(4)*w(5,1);
    
    %classification with step function:
    theta=w(1,1); 
    if activation >= theta
        y=1;
    else
        y=0;
    end
    classify=y; %output classification
end



function test = trainperceptron1(testinMat,testoutMat,bias,trained_wMat)
    
    numIn=length(testinMat); 
    %disp(testinMat);
    %disp(testoutMat);
   
    w1=trained_wMat(:,1);
    w2=trained_wMat(:,2);
    w3=trained_wMat(:,3);
    
    outputMatrix=[];
    
    for row = 1:numIn 


        %OUTPUT1: 
        output1=testnode(bias,w1,testinMat(row,:),testoutMat(row,:),1,row,1);

        %OUTPUTNODE2:   
        %should only return 1 for iris versicolor, 0 for other types
        output2=testnode(bias,w2,testinMat(row,:),testoutMat(row,:),2,row,2); 

        %OUTPUTNODE3: 
        output3=testnode(bias,w3,testinMat(row,:),testoutMat(row,:),3,row,3);
        
        row_output=[output1 output2 output3];
        %fprintf(logfile,sprintf('row number %g : Perceptron output is [%s,%s,%s]. Actual class is [%s,%s,%s]. \n',row,row_output,testoutMat(row,:)));
        outputMatrix=[outputMatrix;row_output];
    end
    test = outputMatrix; %output matrix with "output code" that the perceptron calculated for each row
end
